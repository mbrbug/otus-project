---
image: alpine:latest

stages:
  - build
  - test
  - review
  - release
  - cleanup

variables:
#    IMAGE: ${CI_REGISTRY_IMAGE}/web:${CI_COMMIT_REF_SLUG}
#    GKE_SERVICE_ACCOUNT: base64-encoded-json-service-account-file-from-gke
    GKE_CLUSTER_NAME: my-gke-cluster
    GKE_ZONE: us-central1-c
    GKE_PROJECT: docker-270618
#    URL_REVIEW: ${CI_COMMIT_REF_SLUG}.your.domain.com
#    URL_PRODUCTION: your.domain.com
    KUBE_NAMESPACE: review

build:
  stage: build
  only:
    - branches
  image: docker:git
  services:
    - docker:18.09.7-dind
  variables:
    DOCKER_DRIVER: overlay2
    CI_REGISTRY: 'index.docker.io'
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_PROJECT_PATH
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}
  #when: manual
  before_script:
    - >
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
  script:
    # Building
    - echo "Building Dockerfile-based application..."
    - echo `git show --format="%h" HEAD | head -1` > build_info.txt
    - echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    - docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    - >
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to Docker Hub with CI credentials...for build"
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      fi
    - echo "Pushing to Docker Hub..."
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"

test:
  stage: test
  image: devth/helm
  script:
    - exit 0

release:
  stage: release
  image: docker
  services:
    - docker:18.09.7-dind
  variables:
    CI_REGISTRY: 'index.docker.io'
    CI_APPLICATION_REPOSITORY: $CI_REGISTRY/$CI_PROJECT_PATH
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    CI_CONTAINER_NAME: ci_job_build_${CI_JOB_ID}
  before_script:
    - apk add -U openssl curl
    - >
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
  script:
    - echo "Updating docker images ..."
    - >
      if [[ -n "$CI_REGISTRY_USER" ]]; then
        echo "Logging to Docker Hub with CI credentials for release..."
        docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
      fi
    - docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    - docker push "$CI_APPLICATION_REPOSITORY:$(cat VERSION)"
    - docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" "$CI_APPLICATION_REPOSITORY:latest"
    - docker push "$CI_APPLICATION_REPOSITORY:latest"
  only:
    - master
  when: manual

review:
  stage: review
  image: devth/helm
  variables:
    KUBE_NAMESPACE: review
    host: $CI_PROJECT_PATH_SLUG-$CI_COMMIT_REF_SLUG
    #TILLER_NAMESPACE: kube-system
    CI_APPLICATION_TAG: $CI_COMMIT_REF_SLUG
    name: $CI_ENVIRONMENT_SLUG
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    url: http://review.homembr.ru
    on_stop: stop_review
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master
  when: manual
  before_script:
    # installing dependencies
     - mkdir -p /etc/deploy
     - echo ${GKE_SERVICE_ACCOUNT} | base64 -d > /etc/deploy/sa.json
     - gcloud auth activate-service-account --key-file /etc/deploy/sa.json --project=${GKE_PROJECT}
     - gcloud container clusters get-credentials ${GKE_CLUSTER_NAME} --zone ${GKE_ZONE} --project ${GKE_PROJECT}
     - helm ls
     - kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  script:
    - export track="${1-stable}"
    - >
      if [[ "$track" != "stable" ]]; then
        name="$name-$track"
      fi
    - echo "Clone deploy repository..."
    - git clone https://gitlab.com/$CI_PROJECT_NAMESPACE/shop-deploy.git
    #- ls -la
    - echo "Download helm dependencies..."\
    - echo ci_project_name $CI_PROJECT_NAME
    - echo ci_app_tag $CI_APPLICATION_TAG
    - echo kub_namespace $KUBE_NAMESPACE
    - echo name $name
#    - helm dep update shop-deploy/reddit
    - >
     helm upgrade \
        --install \
        --wait \
        --set "$CI_PROJECT_NAME".image.tag="$CI_APPLICATION_TAG" \
        --namespace="$KUBE_NAMESPACE" \
        "$name" \
        shop-deploy/

stop_review:
  stage: cleanup
  image: devth/helm
  variables:
    GIT_STRATEGY: none
    KUBE_NAMESPACE: review
    name: $CI_ENVIRONMENT_SLUG
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master
  before_script:
        # installing dependencies
#    - apk add -U openssl curl tar gzip bash ca-certificates git
  script:
    - echo name $name
    - helm uninstall "$name" --namespace "$KUBE_NAMESPACE"
